// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/22/2020 13:03:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          GPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module GPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk54m;
reg IEI;
reg PS2_CLK;
reg PS2_DAT;
reg RESET_PIN;
reg uart_rxd;
reg [21:0] Z80_ADDR;
reg Z80_CLK;
reg [7:0] treg_Z80_data;
reg Z80_IORQ;
reg Z80_M1;
reg Z80_MREQ;
reg Z80_RD;
reg Z80_RST;
reg Z80_WR;
// wires                                               
wire 245_DIR;
wire 245_OE;
wire [5:0] b;
wire EA_DIR;
wire EA_OE;
wire [5:0] g;
wire hs;
wire IEO;
wire LED_rdx;
wire LED_txd;
wire pixel_clk;
wire [5:0] r;
wire SPEAKER;
wire STATUS_LED;
wire uart_txd;
wire vde;
wire vs;
wire [7:0] Z80_data;
wire Z80_INT_RQ;

// assign statements (if any)                          
assign Z80_data = treg_Z80_data;
GPU i1 (
// port map - connection between master ports and signals/registers   
	.\245_DIR (245_DIR),
	.\245_OE (245_OE),
	.b(b),
	.clk54m(clk54m),
	.EA_DIR(EA_DIR),
	.EA_OE(EA_OE),
	.g(g),
	.hs(hs),
	.IEI(IEI),
	.IEO(IEO),
	.LED_rdx(LED_rdx),
	.LED_txd(LED_txd),
	.pixel_clk(pixel_clk),
	.PS2_CLK(PS2_CLK),
	.PS2_DAT(PS2_DAT),
	.r(r),
	.RESET_PIN(RESET_PIN),
	.SPEAKER(SPEAKER),
	.STATUS_LED(STATUS_LED),
	.uart_rxd(uart_rxd),
	.uart_txd(uart_txd),
	.vde(vde),
	.vs(vs),
	.Z80_ADDR(Z80_ADDR),
	.Z80_CLK(Z80_CLK),
	.Z80_data(Z80_data),
	.Z80_INT_RQ(Z80_INT_RQ),
	.Z80_IORQ(Z80_IORQ),
	.Z80_M1(Z80_M1),
	.Z80_MREQ(Z80_MREQ),
	.Z80_RD(Z80_RD),
	.Z80_RST(Z80_RST),
	.Z80_WR(Z80_WR)
);
initial 
begin 
#1000000 $stop;
end 

// clk54m
initial
begin
	clk54m = 1'b0;
end 
// Z80_ADDR[ 21 ]
initial
begin
	Z80_ADDR[21] = 1'bX;
	Z80_ADDR[21] = #100000 1'b0;
	Z80_ADDR[21] = #630000 1'bX;
end 
// Z80_ADDR[ 20 ]
initial
begin
	Z80_ADDR[20] = 1'bX;
	Z80_ADDR[20] = #100000 1'b0;
	Z80_ADDR[20] = #630000 1'bX;
end 
// Z80_ADDR[ 19 ]
initial
begin
	Z80_ADDR[19] = 1'bX;
	Z80_ADDR[19] = #100000 1'b0;
	Z80_ADDR[19] = #630000 1'bX;
end 
// Z80_ADDR[ 18 ]
initial
begin
	Z80_ADDR[18] = 1'bX;
	Z80_ADDR[18] = #100000 1'b0;
	Z80_ADDR[18] = #630000 1'bX;
end 
// Z80_ADDR[ 17 ]
initial
begin
	Z80_ADDR[17] = 1'bX;
	Z80_ADDR[17] = #100000 1'b0;
	Z80_ADDR[17] = #630000 1'bX;
end 
// Z80_ADDR[ 16 ]
initial
begin
	Z80_ADDR[16] = 1'bX;
	Z80_ADDR[16] = #100000 1'b0;
	Z80_ADDR[16] = #630000 1'bX;
end 
// Z80_ADDR[ 15 ]
initial
begin
	Z80_ADDR[15] = 1'bX;
	Z80_ADDR[15] = #100000 1'b0;
	Z80_ADDR[15] = #630000 1'bX;
end 
// Z80_ADDR[ 14 ]
initial
begin
	Z80_ADDR[14] = 1'bX;
	Z80_ADDR[14] = #100000 1'b0;
	Z80_ADDR[14] = #630000 1'bX;
end 
// Z80_ADDR[ 13 ]
initial
begin
	Z80_ADDR[13] = 1'bX;
	Z80_ADDR[13] = #100000 1'b0;
	Z80_ADDR[13] = #630000 1'bX;
end 
// Z80_ADDR[ 12 ]
initial
begin
	Z80_ADDR[12] = 1'bX;
	Z80_ADDR[12] = #100000 1'b0;
	Z80_ADDR[12] = #630000 1'bX;
end 
// Z80_ADDR[ 11 ]
initial
begin
	Z80_ADDR[11] = 1'bX;
	Z80_ADDR[11] = #100000 1'b0;
	Z80_ADDR[11] = #630000 1'bX;
end 
// Z80_ADDR[ 10 ]
initial
begin
	Z80_ADDR[10] = 1'bX;
	Z80_ADDR[10] = #100000 1'b0;
	Z80_ADDR[10] = #630000 1'bX;
end 
// Z80_ADDR[ 9 ]
initial
begin
	Z80_ADDR[9] = 1'bX;
	Z80_ADDR[9] = #100000 1'b0;
	Z80_ADDR[9] = #630000 1'bX;
end 
// Z80_ADDR[ 8 ]
initial
begin
	Z80_ADDR[8] = 1'bX;
	Z80_ADDR[8] = #100000 1'b0;
	Z80_ADDR[8] = #630000 1'bX;
end 
// Z80_ADDR[ 7 ]
initial
begin
	Z80_ADDR[7] = 1'bX;
	Z80_ADDR[7] = #100000 1'b1;
	Z80_ADDR[7] = #630000 1'bX;
end 
// Z80_ADDR[ 6 ]
initial
begin
	Z80_ADDR[6] = 1'bX;
	Z80_ADDR[6] = #100000 1'b1;
	Z80_ADDR[6] = #630000 1'bX;
end 
// Z80_ADDR[ 5 ]
initial
begin
	Z80_ADDR[5] = 1'bX;
	Z80_ADDR[5] = #100000 1'b1;
	Z80_ADDR[5] = #630000 1'bX;
end 
// Z80_ADDR[ 4 ]
initial
begin
	Z80_ADDR[4] = 1'bX;
	Z80_ADDR[4] = #100000 1'b1;
	Z80_ADDR[4] = #630000 1'bX;
end 
// Z80_ADDR[ 3 ]
initial
begin
	Z80_ADDR[3] = 1'bX;
	Z80_ADDR[3] = #100000 1'b0;
	Z80_ADDR[3] = #630000 1'bX;
end 
// Z80_ADDR[ 2 ]
initial
begin
	Z80_ADDR[2] = 1'bX;
	Z80_ADDR[2] = #100000 1'b0;
	Z80_ADDR[2] = #630000 1'bX;
end 
// Z80_ADDR[ 1 ]
initial
begin
	Z80_ADDR[1] = 1'bX;
	Z80_ADDR[1] = #100000 1'b0;
	Z80_ADDR[1] = #630000 1'bX;
end 
// Z80_ADDR[ 0 ]
initial
begin
	Z80_ADDR[0] = 1'bX;
	Z80_ADDR[0] = #100000 1'b0;
	Z80_ADDR[0] = #630000 1'bX;
end 

// Z80_CLK
always
begin
	Z80_CLK = 1'b0;
	Z80_CLK = #62500 1'b1;
	#62500;
end 
// Z80_data[ 7 ]
initial
begin
	treg_Z80_data[7] = 1'bZ;
end 
// Z80_data[ 6 ]
initial
begin
	treg_Z80_data[6] = 1'bZ;
end 
// Z80_data[ 5 ]
initial
begin
	treg_Z80_data[5] = 1'bZ;
end 
// Z80_data[ 4 ]
initial
begin
	treg_Z80_data[4] = 1'bZ;
end 
// Z80_data[ 3 ]
initial
begin
	treg_Z80_data[3] = 1'bZ;
end 
// Z80_data[ 2 ]
initial
begin
	treg_Z80_data[2] = 1'bZ;
end 
// Z80_data[ 1 ]
initial
begin
	treg_Z80_data[1] = 1'bZ;
end 
// Z80_data[ 0 ]
initial
begin
	treg_Z80_data[0] = 1'bZ;
end 

// Z80_IORQ
initial
begin
	Z80_IORQ = 1'b1;
	Z80_IORQ = #240000 1'b0;
	Z80_IORQ = #390000 1'b1;
end 

// Z80_RD
initial
begin
	Z80_RD = 1'b1;
	Z80_RD = #240000 1'b0;
	Z80_RD = #390000 1'b1;
end 
endmodule

