module GPU(
	clk54m,
	uart_rxd,
	Z80_CLK,
	Z80_M1,
	Z80_MREQ,
	Z80_WR,
	Z80_RD,
	Z80_IORQ,
	Z80_WAIT,
	Z80_WAIT_IN,
	IEI,
	Z80_RST,
	RESET_PIN,
	Z80_ADDR,
	hs,
	vs,
	uart_txd,
	LED_txd,
	LED_rdx,
	vde,
	pixel_clk,
	Z80_INT_RQ,
	IEO,
	SPEAKER,
	EA_DIR,
	EA_OE,
	STATUS_LED,
	DIR_245,
	OE_245,
	PS2_CLK,
	PS2_DAT,
	b,
	g,
	r,
	Z80_data,
	// debugging
	reset_status
);

parameter int  GPU_MEM   = 98304; // Defines total video RAM in the FPGA, including 1KB palette (98304)
                                  // For EP4CE10, use 41984
parameter int	HW_REGS   = 9;
parameter int  MAGGIES   = 9;     // Number of MAGGIE layers available to GPU

input wire	clk54m;
input wire	uart_rxd;
input wire	Z80_CLK;
input wire	Z80_M1;
input wire	Z80_MREQ;
input wire	Z80_WR;
input wire	Z80_RD;
input wire	Z80_IORQ;
input wire	IEI;
input wire	Z80_RST;
input wire	RESET_PIN;
input wire	[21:0] Z80_ADDR;
output wire Z80_WAIT_IN;
output reg	hs;
output reg	vs;
output reg	uart_txd;
output reg	LED_txd;
output reg	LED_rdx;
output reg	vde;
output reg	pixel_clk;
output wire	Z80_INT_RQ;
output wire Z80_WAIT;
output wire	IEO;
output wire	SPEAKER;
output wire	EA_DIR;
output wire	EA_OE;
output wire	STATUS_LED;
output wire	DIR_245;
output wire	OE_245;
inout wire	PS2_CLK;
inout wire	PS2_DAT;
output reg	[5:0] b;
output reg	[5:0] g;
output reg	[5:0] r;
inout wire	[7:0] Z80_data;
// debugging
output wire reset_status;

wire	[7:0] blue;
wire	clk;
wire	clk_2x;
wire	clk_2x_phase;
wire	[7:0] collision_rd;
wire	[7:0] collision_wr;
wire	com_clk;
wire	com_rst;
wire	[7:0] dat_to_Z80;
wire	data_en;
wire	[15:0] frame;
wire	[15:0] geo_cmd;
wire	geo_port_full;
wire	[15:0] geo_r_data;
wire	[19:0] geo_ram_addr;
wire	geo_rd_req_a;
wire	geo_rd_req_b;
wire	geo_rdy_a;
wire	geo_rdy_b;
wire	[7:0] geo_stat_rd;
wire	[7:0] geo_stat_wr;
wire	[15:0] geo_wr_data;
wire	geo_wr_ena;
wire	[7:0] GPU_HW_REGS_BUS [0:2**HW_REGS-1];
wire	[7:0] green;
wire	h_16bit;
wire	[19:0] h_addr;
wire	[15:0] h_rdat;
wire	[15:0] h_wdat;
wire	h_wena;
wire	hse;
wire	[7:0] key_dat;
wire	[7:0] out0;
wire	[7:0] out1;
wire	[7:0] out2;
wire	[7:0] out3;
wire	[3:0] pc_ena;
wire	PS2_DAT_RDY;
wire	[7:0] ps2STAT;
wire	rd_px_ctr_rs;
wire	[7:0] red;
reg	reset;
wire	[19:0] RS232_addr;
wire	RS232_rd_rdy;
wire	RS232_rd_req;
wire	[7:0] RS232_rDat;
wire	[7:0] RS232_wDat;
wire	RS232_wr_ena;
wire	[7:0] rx_code;
wire	send_geo_cmd;
wire	[8:0] snd_data;
wire	snd_data_tx;
wire	SP_EN;
wire	video_en;
wire	vse;
wire	wr_px_ctr_rs;
wire	[7:0] Z80_RD_data;
wire	Z80_rd_rdy;
wire	[7:0] Z80_WR_data;
wire	osd_hs_out;
wire	osd_vs_out;
wire	[7:0] SYNTHESIZED_WIRE_2;
wire	[7:0] SYNTHESIZED_WIRE_3;
wire	[7:0] SYNTHESIZED_WIRE_4;
reg	[7:0] DFF_inst33;
reg	DFF_inst6;
reg	DFF_inst32;
wire	ps2_tx_data_in;
wire	[0:7] ps2_data_in;
wire	INV_RESET_DFF;
wire	stencil_de_out;
wire	SYNTHESIZED_WIRE_9;
wire	SYNTHESIZED_WIRE_10;
reg	DFF_inst41;
wire	gpu_wr_enable;
wire	gpu_rd_request;
wire	[19:0] gpu_addr;
wire	[7:0] gpu_wdata;
reg	DFF_inst26;
reg	DFF_inst51;
wire	SYNTHESIZED_WIRE_15;
wire	SYNTHESIZED_WIRE_16;
wire	SYNTHESIZED_WIRE_17;
wire	stencil_vs_out;
reg	DFF_inst8;
wire	stencil_hs_out;
wire	RS232_TX;
wire	RS232_LED_TX;
wire	RS232_LED_RX;
wire	clk_3;
wire	stencil_vid_clk;
wire	hde_wire;
wire	vde_wire;
wire	hsync_wire;
wire	vsync_wire;
wire	[47:0] raster_HV_triggers;

vid_out_stencil	b2v_inst(
	.pclk       ( clk                ),
	.reset      ( reset              ),
	.hde_in     ( hse                ),
	.vde_in     ( vse                ),
	.hs_in      ( osd_hs_out         ),
	.vs_in      ( osd_vs_out         ),
	.b_in       ( SYNTHESIZED_WIRE_2 ),
	.g_in       ( SYNTHESIZED_WIRE_3 ),
	.pc_ena     ( pc_ena             ),
	.r_in       ( SYNTHESIZED_WIRE_4 ),
	
	.hs_out     ( stencil_hs_out     ),
	.vs_out     ( stencil_vs_out     ),
	.vid_de_out ( stencil_de_out     ),
	.vid_clk    ( stencil_vid_clk    ),
	.b_out      ( blue               ),
	.g_out      ( green              ),
	.r_out      ( red                )
);
	defparam	b2v_inst.HS_invert = 1 ;
	defparam	b2v_inst.RGB_hbit  = 7 ;
	defparam	b2v_inst.VS_invert = 1 ;


GPU_HW_Control_Regs	b2v_inst1(
	.rst                 ( reset          ),
	.clk                 ( clk            ),
	.we                  ( h_wena         ),
	.addr_in             ( h_addr         ),
	.data_in             ( h_wdat[7:0]    ),
   .GPU_HW_Control_regs ( GPU_HW_REGS_BUS),
   .data_out            (                )
);
	defparam	b2v_inst1.BASE_WRITE_ADDRESS = 0                                                                                    ;
	defparam	b2v_inst1.HW_REGS_SIZE       = HW_REGS                                                                              ;
	defparam	b2v_inst1.RST_VALUES0        = '{0,16,0,16,2,143,1,239,0,0,0,0,0,0,0,0,0,16,1,144,0,16,0,16,0,135,0,56,0,16,0,16}   ;
	defparam	b2v_inst1.RST_VALUES1        = '{2,68,0,16,0,140,0,134,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16} ;
	defparam	b2v_inst1.RST_VALUES2        = '{0,16,0,16,0,16,0,16,0,16,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}             ;
	defparam	b2v_inst1.RST_VALUES3        = '{128,16,0,0,18,0,0,80,2,127,1,223,0,240,0,0,72,0,15,0,2,0,0,0,0,0,0,0,0,1,0,0}      ;
	defparam	b2v_inst1.RST_VALUES4        = '{132,16,0,0,28,169,0,80,1,63,0,239,1,241,0,0,76,0,15,0,2,0,0,0,0,0,0,0,0,1,0,0}     ;
	defparam	b2v_inst1.RST_VALUES5        = '{9,0,0,0,96,0,0,19,0,75,0,91,0,0,0,0,26,16,0,0,51,0,0,96,0,191,0,119,1,1,0,0}       ;


Z80_bridge_v2	b2v_inst10(
	.reset             ( reset          ),
	.GPU_CLK           ( clk            ),
	.Z80_CLK           ( Z80_CLK        ),
	.Z80_M1n           ( Z80_M1         ),
	.Z80_MREQn         ( Z80_MREQ       ),
	.Z80_WRn           ( Z80_WR         ),
	.Z80_RDn           ( Z80_RD         ),
	.gpu_rd_rdy        ( Z80_rd_rdy     ),
	.sel_pclk          ( out3[7]        ),
	.sel_nclk          ( out3[6]        ),
	.PS2_RDY           ( PS2_DAT_RDY    ),
	.Z80_IORQn         ( Z80_IORQ       ),
	.Z80_IEI           ( IEI            ),
	.GEO_STAT_RD       ( geo_stat_rd    ),
	.gpu_rData         ( dat_to_Z80     ),
	.PS2_DAT           ( key_dat        ),
	.PS2_STATUS        ( DFF_inst33     ),
	.RD_PX_CTR         ( collision_rd   ),
	.WR_PX_CTR         ( collision_wr   ),
	.Z80_addr          ( Z80_ADDR       ),
	.Z80_wData         ( Z80_data       ),
	.Z80_245data_dir_r ( DIR_245        ),
	.Z80_rData_ena_r   ( data_en        ),
	.Z80_245_oe_r      ( OE_245         ),
	.gpu_wr_ena        ( gpu_wr_enable  ),
	.gpu_rd_req        ( gpu_rd_request ),
	.Z80_INT_REQ_r     ( Z80_INT_RQ     ),
	.Z80_WAIT          ( Z80_WAIT       ),
	.Z80_IEO_r         ( IEO            ),
	.EA_DIR_r          ( EA_DIR         ),
	.EA_OE_r           ( EA_OE          ),
	.SPKR_EN           ( SP_EN          ),
	.VIDEO_EN          ( video_en       ),
	.snd_data_tx       ( snd_data_tx    ),
	
	.GEO_WR_HI_STROBE ( send_geo_cmd    ),
	.WR_PX_CTR_STROBE ( wr_px_ctr_rs    ),
	.RD_PX_CTR_STROBE ( rd_px_ctr_rs    ),
	
	.GEO_STAT_WR      ( geo_stat_wr     ),
	.GEO_WR_HI        ( geo_cmd[15:8]   ),
	.GEO_WR_LO        ( geo_cmd[7:0]    ),
	.gpu_addr         ( gpu_addr        ),
	.gpu_wdata        ( gpu_wdata       ),
	.snd_data         ( snd_data        ),
	.Z80_rData_r      ( Z80_RD_data     )
); 
	defparam	b2v_inst10.BANK_ID          = '{9,3,71,80,85,32,77,65,88,49,48,0,255,255,255,255} ;  // The BANK_ID data to return ('GPU MAX10')
	defparam	b2v_inst10.BANK_ID_ADDR     = 17'b10111111111111111 ; // The BANK_ID data to return
	defparam	b2v_inst10.BANK_RESPONSE    = 1       ; // 1 - respond to reads at BANK_ID_ADDR with appropriate data, 0 - ignore reads to that address
	defparam	b2v_inst10.MEM_SIZE_BYTES   = GPU_MEM ; // Specifies size of GPU RAM available to host (anything above this returns $FF)
	defparam	b2v_inst10.MEMORY_RANGE     = 3'b010  ; // Z80_addr[21:19] == 3'b010 targets the 512KB 'window' at 0x100000-0x17FFFF (Socket 3 on the uCom)
	defparam	b2v_inst10.data_in          = 1'b0    ;
	defparam	b2v_inst10.data_out         = 1'b1    ;
	defparam	b2v_inst10.INT_TYP          = 0       ; // 0 = polled (IO), 1 = interrupt
	defparam	b2v_inst10.INT_VEC          = 8'b00110000 ; // INTerrupt VECtor to be passed to host in event of an interrupt acknowledge
	defparam	b2v_inst10.INV_Z80_CLK      = 0       ; // Invert the source Z80 clk when considering a bus transaction.
	defparam	b2v_inst10.USE_Z80_CLK      = 1       ; // use 1 to wait for a Z80 clk input before considering a bus transaction.
	defparam	b2v_inst10.IO_DATA          = 240     ; // IO address for keyboard data polling
	defparam	b2v_inst10.IO_STAT          = 241     ; // IO address for keyboard status polling
	defparam	b2v_inst10.SND_OUT          = 242     ; // IO address for speaker/audio output enable
	defparam	b2v_inst10.IO_BLNK          = 243     ; // IO address for BLANK signal to video DAC
	defparam	b2v_inst10.SND_TON          = 244     ; // IO address for TONE register in sound module
	defparam	b2v_inst10.SND_DUR          = 245     ; // IO address for DURATION register in sound module
	defparam	b2v_inst10.GEO_LO           = 246     ; // IO address for GEOFF LOW byte
	defparam	b2v_inst10.GEO_HI           = 247     ; // IO address for GEOFF HIGH byte
	defparam b2v_inst10.FIFO_STAT        = 248     ; // IO address for GPU FIFO status on bit 0 - remaining bits free for other data
	defparam	b2v_inst10.Z80_CLK_FILTER   = 0       ; // The number of GPU clock cycles to filter the Z80 bus commands, use 0 through 7.
	defparam	b2v_inst10.Z80_CLK_FILTER_P = 2       ; // The number of GPU clock cycles to filter the Z80 bus PORT commands, use 0 through 7.

sound	b2v_inst16(
	.clk     ( clk         ),
	.enable  ( SP_EN       ),
	.data_tx ( snd_data_tx ),
	.reset   ( reset       ),
	.data    ( snd_data    ),
	.speaker ( SPEAKER     )
);


altpll0	b2v_inst17(
	.inclk0 ( clk54m  ),
	.c0     ( clk     ),
	.c1     ( clk_2x  ),
	.c2     ( com_clk ),
	.c3     ( clk_3   )
);


ps2_keyboard_interface	b2v_inst18(
	.clk             ( com_clk         ),
	.reset           ( reset           ),
	.rx_read         ( DFF_inst32      ),
	.tx_write        ( ps2_tx_data_in  ),
	.ps2_clk         ( PS2_CLK         ),
	.ps2_data        ( PS2_DAT         ),
	.tx_data         ( ps2_data_in     ),
	.rx_extended     ( ps2STAT[0]      ),
	.rx_released     ( key_dat[7]      ),
	.rx_shift_key_on ( ps2STAT[2]      ),
	.rx_data_ready   ( PS2_DAT_RDY     ),
	.caps_lock       ( ps2STAT[1]      ),
	.rx_ascii        ( key_dat[6:0]    ),
	.rx_scan_code    ( rx_code         )
);
	defparam	b2v_inst18.m1_rx_clk_h                 = 1    ;
	defparam	b2v_inst18.m1_rx_clk_l                 = 0    ;
	defparam	b2v_inst18.m1_rx_falling_edge_marker   = 13   ;
	defparam	b2v_inst18.m1_rx_rising_edge_marker    = 14   ;
	defparam	b2v_inst18.m1_tx_clk_h                 = 4    ;
	defparam	b2v_inst18.m1_tx_clk_l                 = 5    ;
	defparam	b2v_inst18.m1_tx_done_recovery         = 7    ;
	defparam	b2v_inst18.m1_tx_error_no_keyboard_ack = 8    ;
	defparam	b2v_inst18.m1_tx_first_wait_clk_h      = 10   ;
	defparam	b2v_inst18.m1_tx_first_wait_clk_l      = 11   ;
	defparam	b2v_inst18.m1_tx_force_clk_l           = 3    ;
	defparam	b2v_inst18.m1_tx_reset_timer           = 12   ;
	defparam	b2v_inst18.m1_tx_rising_edge_marker    = 9    ;
	defparam	b2v_inst18.m1_tx_wait_clk_h            = 2    ;
	defparam	b2v_inst18.m1_tx_wait_keyboard_ack     = 6    ;
	defparam	b2v_inst18.m2_rx_data_ready            = 1    ;
	defparam	b2v_inst18.m2_rx_data_ready_ack        = 0    ;
	defparam	b2v_inst18.TIMER_5USEC_BITS_PP         = 8    ;
	defparam	b2v_inst18.TIMER_5USEC_VALUE_PP        = 186  ;
	defparam	b2v_inst18.TIMER_60USEC_BITS_PP        = 12   ;
	defparam	b2v_inst18.TIMER_60USEC_VALUE_PP       = 2950 ;
	defparam	b2v_inst18.TRAP_SHIFT_KEYS_PP          = 0    ;

sync_generator	b2v_inst2(
	.pclk                ( clk                ),
	.reset               ( reset              ),
	.GPU_HW_Control_regs ( GPU_HW_REGS_BUS    ),
	.hde                 ( hde_wire           ),
	.vde                 ( vde_wire           ),
	.hsync               ( hsync_wire         ),
	.vsync               ( vsync_wire         ),
	.pc_ena              ( pc_ena             ),
	.raster_HV_triggers  ( raster_HV_triggers )
);
	defparam	b2v_inst2.BASE_OFFSET     = 0   ;
	defparam	b2v_inst2.H_BACK_PORCH    = 48  ;
	defparam	b2v_inst2.H_FRONT_PORCH   = 16  ;
	defparam	b2v_inst2.H_RES           = 640 ;
	defparam	b2v_inst2.HSYNC_WIDTH     = 96  ;
	defparam	b2v_inst2.HW_REGS_SIZE    = 9   ;
	defparam	b2v_inst2.IMAGE_OFFSET_X  = 16  ;
	defparam	b2v_inst2.IMAGE_OFFSET_Y  = 16  ;
	defparam	b2v_inst2.PIX_CLK_DIVIDER = 4   ;
	defparam	b2v_inst2.V_BACK_PORCH    = 33  ;
	defparam	b2v_inst2.V_FRONT_PORCH   = 10  ;
	defparam	b2v_inst2.V_RES           = 480 ;
	defparam	b2v_inst2.VSYNC_HEIGHT    = 2   ;

data_mux_geo	b2v_inst25(
	.clk           ( clk            ),
	.reset         ( reset          ),
	.wr_ena_a      ( gpu_wr_enable  ),
	.rd_req_a      ( gpu_rd_request ),
	.wr_ena_b      ( RS232_wr_ena   ),
	.rd_req_b      ( RS232_rd_req   ),
	.geo_rd_req_a  ( geo_rd_req_a   ),
	.geo_rd_req_b  ( geo_rd_req_b   ),
	.geo_wr_ena    ( geo_wr_ena     ),
	.address_a     ( gpu_addr       ),
	.address_b     ( RS232_addr     ),
	.address_geo   ( geo_ram_addr   ),
	.data_in_a     ( gpu_wdata      ),
	.data_in_b     ( RS232_wDat     ),
	.data_in_geo   ( geo_wr_data    ),
	.gpu_data_in   ( h_rdat         ),
	.gpu_wr_ena    ( h_wena         ),
	.gpu_ena_16bit ( h_16bit        ),
	.gpu_rd_rdy_a  ( Z80_rd_rdy     ),
	.gpu_rd_rdy_b  ( RS232_rd_rdy   ),
	.geo_rd_rdy_a  ( geo_rdy_a      ),
	.geo_rd_rdy_b  ( geo_rdy_b      ),
	.geo_port_full ( geo_port_full  ),
	.data_out_a    ( dat_to_Z80     ),
	.data_out_b    ( RS232_rDat     ),
	.data_out_geo  ( geo_r_data     ),
	.gpu_address   ( h_addr         ),
	.gpu_data_out  ( h_wdat         )
);
	defparam	b2v_inst25.GEO_ENDIAN_SWAP   = 1'b1 ;
	defparam	b2v_inst25.READ_CLOCK_CYCLES = 2    ;
	defparam	b2v_inst25.REGISTER_GPU_PORT = 1'b1 ;
	defparam	b2v_inst25.REGISTER_INA      = 1'b1 ;
	defparam	b2v_inst25.REGISTER_INB      = 1'b1 ;

rs232_debugger	b2v_inst3(
	.clk         ( clk              ),
	.rxd         ( DFF_inst51       ),
	.host_rd_rdy ( RS232_rd_rdy     ),
	.host_rdata  ( RS232_rDat       ),
	.in0         ( key_dat          ),
	.in1         ( rx_code          ),
	.in2         ( ps2STAT          ),
	
	.cmd_rst     ( com_rst          ),
	.txd         ( RS232_TX         ),
	.LED_txd     ( RS232_LED_TX     ),
	.LED_rxd     ( RS232_LED_RX     ),
	.host_rd_req ( RS232_rd_req     ),
	.host_wr_ena ( RS232_wr_ena     ),
	.host_addr   ( RS232_addr[15:0] ),
	.host_wdata  ( RS232_wDat       ),
	
	.out3(out3)
);
	defparam	b2v_inst3.ADDR_SIZE     = 16        ;
	defparam	b2v_inst3.BAUD_RATE     = 921600    ;
	defparam	b2v_inst3.CLK_IN_HZ     = 125000000 ;
	defparam	b2v_inst3.READ_REQ_1CLK = 1         ;

geometry_processor	b2v_inst30(
	.clk              ( clk                ),
	.reset            ( SYNTHESIZED_WIRE_15),
	.fifo_cmd_ready   ( send_geo_cmd       ),
	.rd_data_rdy_a    ( geo_rdy_a          ),
	.rd_data_rdy_b    ( geo_rdy_b          ),
	.ram_mux_busy     ( geo_port_full      ),
	.hse              ( hse                ),
	.vse              ( vse                ),
	.collision_rd_rst ( rd_px_ctr_rs       ),
	.collision_wr_rst ( wr_px_ctr_rs       ),
	.fifo_cmd_in      ( geo_cmd            ),
	.rd_data_in       ( geo_r_data         ),
	.rd_req_a         ( geo_rd_req_a       ),
	.rd_req_b         ( geo_rd_req_b       ),
	.wr_ena           ( geo_wr_ena         ),
	.fifo_cmd_busy    ( geo_stat_rd[0]     ),
	.collision_rd     ( collision_rd       ),
	.collision_wr     ( collision_wr       ),
	.ram_addr         ( geo_ram_addr       ),
	.ram_wr_data      ( geo_wr_data        )
);
	defparam	b2v_inst30.FIFO_MARGIN = 32;

vid_osd_generator	b2v_inst9(
	.clk_2x              ( clk_2x             ),
	.clk_2x_phase        ( clk_2x_phase       ),
	.clk                 ( clk                ),
	.hde_in              ( hde_wire           ),
	.vde_in              ( vde_wire           ),
	.hs_in               ( hsync_wire         ),
	.vs_in               ( vsync_wire         ),
	.host_clk            ( clk                ),
	.host_wr_ena         ( h_wena             ),
	.ena_host_16bit      ( h_16bit            ),
	.GPU_HW_Control_regs ( GPU_HW_REGS_BUS    ),
	.host_addr           ( h_addr             ),
	.host_wr_data        ( h_wdat             ),
	.HV_triggers_in      ( raster_HV_triggers ),
	.pc_ena              ( pc_ena             ),
	.hde_out             ( hse                ),
	.vde_out             ( vse                ),
	.hs_out              ( osd_hs_out         ),
	.vs_out              ( osd_vs_out         ),
	.blue                ( SYNTHESIZED_WIRE_2 ),
	.green               ( SYNTHESIZED_WIRE_3 ),
	.host_rd_data        ( h_rdat             ),
	.red                 ( SYNTHESIZED_WIRE_4 )
);
	defparam	b2v_inst9.ADDR_SIZE    = 17                     ; // 15 = 32KB, 16 = 64KB etc
	defparam	b2v_inst9.GPU_RAM_MIF  = "GPU_MIF_CE10_10M.mif" ; // Default memory contents
	defparam	b2v_inst9.HW_REGS_SIZE = HW_REGS                ; // Default size for hardware register bus
	defparam	b2v_inst9.NUM_LAYERS   = MAGGIES                ; // Number of MAGGIEs
	defparam	b2v_inst9.NUM_WORDS    = GPU_MEM - 1024         ; // RAM space for HW registers and video memory - doesn't include palette RAM
	defparam	b2v_inst9.PALETTE_ADDR = GPU_MEM - 1024         ; // Base address of palette memory, usually located at end of video graphics RAM
	defparam	b2v_inst9.PIPE_DELAY   = 11                     ; // This parameter selects the number of pixel clocks to delay the VDE and sync outputs.  Only use 2 through 9.

status_LED	b2v_inst22(
	.clk ( clk        ),
	.LED ( STATUS_LED )
);
	defparam	b2v_inst22.div = 2;

//	
// Wire assigns
//
assign geo_stat_rd[7:1]    = 7'b0000000 ;
assign ps2STAT[7:4]        = 4'b0000    ;
assign ps2_tx_data_in      = 0          ;
assign ps2_data_in         = 0          ;

assign SYNTHESIZED_WIRE_10 = com_rst | INV_RESET_DFF                  ;
assign SYNTHESIZED_WIRE_15 = DFF_inst26 | geo_stat_wr[0]              ;
assign SYNTHESIZED_WIRE_16 = video_en & stencil_de_out                ;
assign SYNTHESIZED_WIRE_17 = SYNTHESIZED_WIRE_9 | SYNTHESIZED_WIRE_10 ;
assign Z80_data            = data_en ? Z80_RD_data : 8'bzzzzzzzz      ;
// debugging
assign reset_status        = !SYNTHESIZED_WIRE_17                     ;

//
// Discrete logic blocks
//
exp	b2v_inst4(
	.in  ( DFF_inst8     ),
	.out ( INV_RESET_DFF )
);

exp	b2v_inst11(
	.in  ( DFF_inst6    ),
	.out ( clk_2x_phase )
);

exp	b2v_inst23(
	.in  ( DFF_inst41         ),
	.out ( SYNTHESIZED_WIRE_9 )
);

//
// Clock blocks
//
always@(posedge com_clk)
begin
	begin
		DFF_inst32 <= PS2_DAT_RDY;
	end
end

always@(posedge clk)
begin
	begin
		DFF_inst26      <= reset;
		DFF_inst33[7:0] <= ps2STAT[7:0];
		r[5:0]          <= red[7:2];
		g[5:0]          <= green[7:2];
		b[5:0]          <= blue[7:2];
		vde             <= SYNTHESIZED_WIRE_16;
		reset           <= SYNTHESIZED_WIRE_17;
		vs              <= stencil_vs_out;
		hs              <= stencil_hs_out;
		DFF_inst41      <= Z80_RST;
		DFF_inst51      <= uart_rxd;
		uart_txd        <= RS232_TX;
		LED_txd         <= RS232_LED_TX;
		LED_rdx         <= RS232_LED_RX;
		pixel_clk       <= stencil_vid_clk;
		DFF_inst8       <= RESET_PIN;
	end
end

always@(posedge clk_2x)
begin
	begin
		DFF_inst6 <= clk_3;
	end
end

endmodule
